
// // Custom Theming for Angular Material
// // For more information: https://material.angular.io/guide/theming
// @use '@angular/material' as mat;
// // Plus imports for other components in your app.

// // Include the common styles for Angular Material. We include this here so that you only
// // have to load a single css file for Angular Material in your app.
// // Be sure that you only ever include this mixin once!
// @include mat.core();

// // Define the theme object.
// $ceap-portal-proveedor-theme: mat.define-theme((
//   color: (
//     theme-type: light,
//     primary: mat.$green-palette,
//     tertiary: mat.$blue-palette,
//   ),
//   density: (
//     scale: 0,
//   )
// ));

// // Include theme styles for core and each component used in your app.
// // Alternatively, you can import and @include the theme mixins for each component
// // that you are using.
// :root {
//   @include mat.all-component-themes($ceap-portal-proveedor-theme);
// }

// // Comment out the line below if you want to use the pre-defined typography utility classes.
// // For more information: https://material.angular.io/guide/typography#using-typography-styles-in-your-application.
// // @include mat.typography-hierarchy($ceap-portal-proveedor-theme);

// // Comment out the line below if you want to use the deprecated `color` inputs.
// // @include mat.color-variants-backwards-compatibility($ceap-portal-proveedor-theme);


@use 'sass:map';
@use '@angular/material' as mat;

@include mat.core();

$_palettes: (
  primary: (
    0: #000000,
    10: #00210c,
    20: #003919,
    25: #00451f,
    30: #005226,
    35: #00602e,
    40: #006d35,
    50: #0a8342,
    60: #3ba45e,
    70: #58bf77,
    80: #74dc90,
    90: #90f9aa,
    95: #c4ffcc,
    98: #eaffe9,
    99: #f5fff2,
    100: #ffffff,
  ),
  secondary: (
    0: #000000,
    10: #0e1f12,
    20: #233426,
    25: #2e4030,
    30: #394b3b,
    35: #445746,
    40: #506352,
    50: #687c6a,
    60: #829683,
    70: #9cb19d,
    80: #b7ccb7,
    90: #d3e8d2,
    95: #e1f7e0,
    98: #eaffe9,
    99: #f5fff2,
    100: #ffffff,
  ),
  tertiary: (
    0: #000000,
    10: #001f25,
    20: #01363e,
    25: #12414a,
    30: #204d56,
    35: #2d5962,
    40: #3a656e,
    50: #537e87,
    60: #6d98a1,
    70: #87b2bd,
    80: #a2ced8,
    90: #bdeaf5,
    95: #d5f7ff,
    98: #effcff,
    99: #f7fdff,
    100: #ffffff,
  ),
  neutral: (
    0: #000000,
    10: #191c19,
    20: #2e312e,
    25: #393c39,
    30: #454744,
    35: #50534f,
    40: #5c5f5b,
    50: #757873,
    60: #8f918d,
    70: #aaaca7,
    80: #c5c7c2,
    90: #e2e3de,
    95: #f0f1ec,
    98: #f9faf4,
    99: #fcfdf7,
    100: #ffffff,
    4: #0c0f0c,
    6: #111411,
    12: #1d201d,
    17: #282b27,
    22: #333532,
    24: #373a36,
    87: #d9dbd5,
    92: #e7e9e3,
    94: #edeee9,
    96: #f3f4ef,
  ),
  neutral-variant: (
    0: #000000,
    10: #161d17,
    20: #2b322b,
    25: #363d36,
    30: #414941,
    35: #4d544c,
    40: #596058,
    50: #717970,
    60: #8b938a,
    70: #a6ada4,
    80: #c1c9bf,
    90: #dde5da,
    95: #ebf3e8,
    98: #f4fcf1,
    99: #f7fef4,
    100: #ffffff,
  ),
  error: (
    0: #000000,
    10: #410002,
    20: #690005,
    25: #7e0007,
    30: #93000a,
    35: #a80710,
    40: #ba1a1a,
    50: #de3730,
    60: #ff5449,
    70: #ff897d,
    80: #ffb4ab,
    90: #ffdad6,
    95: #ffedea,
    98: #fff8f7,
    99: #fffbff,
    100: #ffffff,
  ),
);

$_rest: (
  secondary: map.get($_palettes, secondary),
  neutral: map.get($_palettes, neutral),
  neutral-variant: map.get($_palettes,  neutral-variant),
  error: map.get($_palettes, error),
);
$_primary: map.merge(map.get($_palettes, primary), $_rest);
$_tertiary: map.merge(map.get($_palettes, tertiary), $_rest);


$my-theme: mat.define-theme((
 color: (
    theme-type: light,
    primary: $_primary,
    tertiary: $_tertiary,
  ),
  density: (
    scale: 0,
  )
));

// .tertiary-checkbox {
//   @include mat.checkbox-color($theme, $color-variant: tertiary);
// }

:root {
  // Emit theme-dependent styles for common features used across multiple components.
  // @include mat.core-theme($my-theme);
  @include mat.all-component-themes($my-theme);

  // Emit styles for MatButton based on `$my-theme`. Because the configuration
  // passed to `define-theme` omits typography, `button-theme` will not
  // emit any typography styles.
  // @include mat.button-theme($my-theme);

  // Include the theme mixins for other components you use here.
}
